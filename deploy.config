# Deployment version
# By default, the __VERSION__ folder under dist/ will be renamed with the
# git sha of the PR being deployed . If this property is defined, the
# specified <version_string> will be used to rename the __VERSION__ folder
# instead.
# VERSION=<version_string>


# Cache time in seconds
# These properties may be used to override the default max-age values used
# for top-level and second-level content. Anything under the __VERSION__
# folder in dist/ and the SECOND_LEVEL_FOLDERS listed below are considered
# second-level content. Everything other than that are considered top-level
# content. By default, the max-age value for top-level and second-level
# content is 60 and 2592000 (30 days), respectively.
# TOP_LEVEL_MAX_AGE=<short_cache_time>
# SECOND_LEVEL_MAX_AGE=<long_cache_time>


# Custom long-cached folders
# For the folders under dist/ that you want to have long cache time, list them
# as comma-seperated list.
#
# By default, the second-level cache time (or long cache time) is only
# applied to the dist/__VERSION__ folder in the build result. This feature
# allows developers to specify which additional folders will have long cache time.
#
# It is expected that folder1, folder2, etc, are relative to dist after build.
# That is, if you want long cache for everything under dist/folder1, put
# “folder1” in the list. If you want long cache specifically for
# dist/folder1/subfolder1 but *not* any other files under dist/folder1, list
# “folder1/subfolder1”.
#
# Developers must use this feature with caution and be aware of the implications
# of specifying custom long-cached folders: These files are cached, in the CDN
# and on client machines, for the long cache time. Therefore, if the files under
# the folder have fixed file names, clients of your website will *not* see the
# changes in your new deployment until the cache is expired. When this feature is used,
# it is recommended that developers use another mechanism for expiring content.
# For example, include hashes (based on file content) in file names.
# SECOND_LEVEL_FOLDERS=<folder1>,<folder2>,...


# Explicit file compression
# Our CDN solution automatically gzips content and serves it with content-encoding=gzip
# if the browser says that it can handle gzip content. However, this automatic compression
# does not happen for all file types. For cases where automated compression isn't available
# for a particular type, this property can be used to have the pipeline pre-compress
# content and deploy it such that it is ALWAYS served as content-encoding=gzip.
# List file extensions as a comma-separated list.
# EXPLICIT_GZIP_EXTENSIONS=<file_ext1>,<file_ext2>,...
